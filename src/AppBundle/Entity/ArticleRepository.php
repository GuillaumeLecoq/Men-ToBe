<?php

namespace AppBundle\Entity;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function getArticleByCategories($categories, $step = null, $order = array(), $limit = null, $offset = null){
        $q = $this->createQueryBuilder('a')
            ->select('a')
            ->andWhere('a.category IN (:categories)')
            ->setParameter('categories', $categories)
            ->andwhere('a.step = :step')
            ->setParameter('step', $step)
            ->orderBy("a.".$order['name'], $order['pos'])
            ->setFirstResult($offset)
            ->setMaxResults($limit)
        ;

        return $q->getQuery()->getResult();
    }

    /** Function return a list of article */
    public function getArticle($where, $order = null, $limit = null, $offset = null) {
        return $this->findBy(
            $where,
            $order,
            $limit,
            $offset
        );
    }

    // get previous article publish depending of the updatedAt
    public function getPreviousPublishArticle($updatedAt, $category = null) {

        $qb = $this->createQueryBuilder('a')
        ->select('a')

        // Filter articles.
        ->where('a.updatedAt < :updatedAt')
        ->setParameter(':updatedAt', $updatedAt->format('Y-m-d H:i:s'))

        // Filter publish.
        ->andWhere('a.step = :step')
        ->setParameter(':step', Article::PUBLICATION)

        // Order by id.
        ->orderBy('a.id', 'DESC')

        // Get the first record.
        ->setFirstResult(0)
        ->setMaxResults(1)
        ;

        if ($category != null)
        {
            // Filter category.
            $qb->andWhere('a.category = :category');
            $qb->setParameter(':category', $category);            
        }

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    // get next article publish depending of the updatedAt
    public function getNextPublishArticle($updatedAt, $category = null) {
        
        $qb = $this->createQueryBuilder('a')
        ->select('a')

        // Filter articles.
        ->where('a.updatedAt > :updatedAt')
        ->setParameter(':updatedAt', $updatedAt->format('Y-m-d H:i:s'))

        // Filter publish.
        ->andWhere('a.step = :step')
        ->setParameter(':step', Article::PUBLICATION)

        // Order by id.
        ->orderBy('a.id', 'DESC')

        // Get the first record.
        ->setFirstResult(0)
        ->setMaxResults(1)
        ;

        if ($category != null)
        {
            // Filter category.
            $qb->andWhere('a.category = :category');
            $qb->setParameter(':category', $category);            
        }

        $result = $qb->getQuery()->getOneOrNullResult();

        return $result;
    }

    /** function who returned the popular article */
    public function getPopularArticle($ids){
        return $this->findBy(
            array("id" => $ids, "step" => 4)
        );
    }

    /** function who returned the popular article by a specific category */
    public function getPopularArticleByCategory($categories, $limit = null, $offset = null){

        $q = $this->createQueryBuilder('a')
            ->select('a')
            ->andWhere('a.category IN (:categories)')
            ->setParameter('categories', $categories)
            ->andwhere('a.step = :step')
            ->setParameter('step', Article::PUBLICATION)
            ->orderBy("a.view", "desc")
            ->setFirstResult($offset)
            ->setMaxResults($limit)
        ;

        return $q->getQuery()->getResult();

    }

    /** return the total number of view on a specific category */
    public function totalViewByCategory($category){

        $qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a)')
            ->select('SUM(a.view)')
            ->where('a.category = :category')
            ->setParameter('category', $category)
            ->andwhere('a.step = :step')
            ->setParameter('step', Article::PUBLICATION)
            ->getQuery()
            ->setMaxResults(1);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /** return the article who has the data on his table */
    public function getSearchOnArticle($data){

        $qb = $this->createQueryBuilder('a');
        return $result = $qb->where(
            $qb->expr()->like('a.name', ':searchValue')
            )
            ->setParameter('searchValue','%'.$data.'%')
            ->andwhere('a.step = :step')
            ->setParameter('step', Article::PUBLICATION)
            ->orderBy('a.updatedAt', 'DESC')
            ->getQuery()
            ->getResult();

    }

    /** Return the total of article where the step is waiting */
    public function getTotalArticleWaiting()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a)')
            ->where('a.step = :step')
            ->setParameter('step', Article::WAITING);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /** Return the total of article where the step is publish */
    public function getTotalArticlePublish()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a)')
            ->where('a.step = :step')
            ->setParameter('step', Article::PUBLICATION);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /** function who returned the total number of article on a category or multiple categories */
    public function getTotalArticleByCategory($categories) {

        $q = $this->createQueryBuilder('a')
            ->select('a')
            ->andWhere('a.category IN (:categories)')
            ->setParameter('categories', $categories)
            ->andwhere('a.step = :step')
            ->setParameter('step', Article::PUBLICATION);
        ;

        return count($q->getQuery()->getResult());
    }

    /** return the total article for a specific step */
	public function getTotalArticleByStep($step)
	{
		$qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a)')
            ->Where('a.step = :step')
            ->setParameter('step', $step);

        return $qb->getQuery()->getSingleScalarResult();
	}

    /** return the total article for a specific author */
	public function getTotalArticleByAuthor($author)
	{
		$qb = $this->createQueryBuilder('a');
        $qb->select('COUNT(a)')
            ->Where('a.author = :author')
            ->setParameter('author', $author)
            ->orderBy('a.date', 'DESC');

        return $qb->getQuery()->getSingleScalarResult();
	}

    /** Delete a specific article by is id */
    public function deleteArticleById($idArticle){
        $article = $this->findOneBy(array('id' => $idArticle));
        $this->_em->remove($article);
        $this->_em->flush();
    }

    /** Return the most commented comment (limit 5) */
    public function mostCommentedArticles() {

        /** @var  $results Use API DISQUS */
        $results = json_decode(file_get_contents('https://disqus.com/api/3.0/threads/listPopular.json?api_key=ETBYzRDdBoJQWIxmPcWWOHDVrg6h92tDejfXb3nl9lEwtBuomurerxtlGId0fN1N&forum=mentobefr&interval=90d&limit=5'));

        $mostCommentedArticles = array();

        foreach ($results->response as $result) {
            $articleSlug  = explode('/article/', $result->link);

            if (!empty($articleSlug[1])) {
                $article = $this->findOneBy(array('slug' => $articleSlug[1]));
                if (!empty($article)) {
                    array_push($mostCommentedArticles, $article);
                }
            }
        }

        return $mostCommentedArticles;
    }
}
